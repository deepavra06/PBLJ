-- Step 1: Select the 'company' database to work with
USE company;

-- Step 2: Create the 'Product' table
-- Note: ProductID is an AUTO_INCREMENT field, so it will be assigned automatically.
CREATE TABLE IF NOT EXISTS Product (
    ProductID INT AUTO_INCREMENT PRIMARY KEY,
    ProductName VARCHAR(100) NOT NULL,
    Price DECIMAL(10, 2),
    Quantity INT
);

-- Step 3: Clear the table before adding new data
TRUNCATE TABLE Product;

-- Step 4: Insert some sample records into the 'Product' table
INSERT INTO Product (ProductName, Price, Quantity) VALUES
('Laptop', 1200.00, 50),
('Smartphone', 800.50, 200),
('Keyboard', 75.75, 500);

-- Step 5: Verify that the data was inserted correctly
SELECT * FROM Product;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

/**
 * A menu-driven program to perform CRUD operations on a 'Product' table
 * using JDBC with transaction handling.
 */
public class ProductManager {

    // --- Database Configuration ---
    // Connects to the same 'company' database.
    private static final String DB_URL = "jdbc:mysql://localhost:3306/company";
    private static final String USER = "root";
    private static final String PASS = "";

    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            while (true) {
                System.out.println("\n--- Product Management Menu ---");
                System.out.println("1. Create a new product");
                System.out.println("2. Read all products");
                System.out.println("3. Update a product");
                System.out.println("4. Delete a product");
                System.out.println("5. Exit");
                System.out.print("Enter your choice: ");

                // Input validation to ensure an integer is entered
                if (!scanner.hasNextInt()) {
                    System.out.println("Invalid input. Please enter a number.");
                    scanner.next(); // Discard the non-integer input
                    continue;
                }
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        createProduct(scanner);
                        break;
                    case 2:
                        readProducts();
                        break;
                    case 3:
                        updateProduct(scanner);
                        break;
                    case 4:
                        deleteProduct(scanner);
                        break;
                    case 5:
                        System.out.println("Exiting application.");
                        return;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            }
        }
    }

    /**
     * Creates a new product in the database.
     * @param scanner Scanner object to read user input.
     */
    private static void createProduct(Scanner scanner) {
        try {
            System.out.print("Enter Product Name: ");
            String name = scanner.nextLine();
            System.out.print("Enter Price: ");
            double price = scanner.nextDouble();
            System.out.print("Enter Quantity: ");
            int quantity = scanner.nextInt();

            String sql = "INSERT INTO Product (ProductName, Price, Quantity) VALUES (?, ?, ?)";

            try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {

                pstmt.setString(1, name);
                pstmt.setDouble(2, price);
                pstmt.setInt(3, quantity);
                int rowsAffected = pstmt.executeUpdate();

                if (rowsAffected > 0) {
                    System.out.println("Product created successfully!");
                }
            } catch (SQLException e) {
                System.err.println("Error creating product: " + e.getMessage());
            }
        } catch (java.util.InputMismatchException e) {
            System.err.println("Invalid input. Please enter the correct data type.");
            scanner.nextLine(); // Clear the invalid input
        }
    }

    /**
     * Reads and displays all products from the database.
     */
    private static void readProducts() {
        String sql = "SELECT ProductID, ProductName, Price, Quantity FROM Product";

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.println("\n--- All Products ---");
            boolean hasProducts = false;
            while (rs.next()) {
                hasProducts = true;
                int id = rs.getInt("ProductID");
                String name = rs.getString("ProductName");
                double price = rs.getDouble("Price");
                int quantity = rs.getInt("Quantity");
                System.out.printf("ID: %d, Name: %s, Price: %.2f, Quantity: %d\n", id, name, price, quantity);
            }
            if (!hasProducts) {
                System.out.println("No products found in the database.");
            }
            System.out.println("--------------------");

        } catch (SQLException e) {
            System.err.println("Error reading products: " + e.getMessage());
        }
    }

    /**
     * Updates an existing product's details using transaction handling.
     * @param scanner Scanner object to read user input.
     */
    private static void updateProduct(Scanner scanner) {
        Connection conn = null;
        try {
            System.out.print("Enter ProductID to update: ");
            int id = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            System.out.print("Enter new Product Name: ");
            String name = scanner.nextLine();
            System.out.print("Enter new Price: ");
            double price = scanner.nextDouble();
            System.out.print("Enter new Quantity: ");
            int quantity = scanner.nextInt();

            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            conn.setAutoCommit(false); // Start transaction

            String sql = "UPDATE Product SET ProductName = ?, Price = ?, Quantity = ? WHERE ProductID = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, name);
                pstmt.setDouble(2, price);
                pstmt.setInt(3, quantity);
                pstmt.setInt(4, id);
                int rowsAffected = pstmt.executeUpdate();

                if (rowsAffected > 0) {
                    conn.commit(); // Commit transaction
                    System.out.println("Product updated successfully!");
                } else {
                    System.out.println("Product not found. No changes made.");
                    conn.rollback(); // Rollback if no product was found
                }
            }
        } catch (java.util.InputMismatchException e) {
            System.err.println("Invalid input. Please enter the correct data type.");
            scanner.nextLine(); // Clear the invalid input
        } catch (SQLException e) {
            System.err.println("Error updating product. Rolling back transaction.");
            if (conn != null) {
                try {
                    conn.rollback(); // Rollback on error
                } catch (SQLException ex) {
                    System.err.println("Error during rollback: " + ex.getMessage());
                }
            }
        } finally {
            if (conn != null) {
                try {
                    conn.setAutoCommit(true); // Reset to default
                    conn.close();
                } catch (SQLException e) {
                    System.err.println("Error closing connection: " + e.getMessage());
                }
            }
        }
    }

    /**
     * Deletes a product from the database using transaction handling.
     * @param scanner Scanner object to read user input.
     */
    private static void deleteProduct(Scanner scanner) {
        Connection conn = null;
        try {
            System.out.print("Enter ProductID to delete: ");
            int id = scanner.nextInt();

            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            conn.setAutoCommit(false); // Start transaction

            String sql = "DELETE FROM Product WHERE ProductID = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setInt(1, id);
                int rowsAffected = pstmt.executeUpdate();
                
                if (rowsAffected > 0) {
                    conn.commit(); // Commit transaction
                    System.out.println("Product deleted successfully!");
                } else {
                    System.out.println("Product not found. No changes made.");
                    conn.rollback(); // Rollback if no product was found
                }
            }
        } catch (java.util.InputMismatchException e) {
            System.err.println("Invalid input. Please enter a valid Product ID.");
            scanner.nextLine(); // Clear the invalid input
        } catch (SQLException e) {
            System.err.println("Error deleting product. Rolling back transaction.");
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    System.err.println("Error during rollback: " + ex.getMessage());
                }
            }
        } finally {
            if (conn != null) {
                try {
                    conn.setAutoCommit(true); // Reset to default
                    conn.close();
                } catch (SQLException e) {
                    System.err.println("Error closing connection: " + e.getMessage());
                }
            }
        }
    }
}

